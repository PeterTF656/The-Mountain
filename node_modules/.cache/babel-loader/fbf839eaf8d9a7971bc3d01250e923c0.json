{"ast":null,"code":"//  Triangulation sets of three\nexport const TRIANGULATION = [[127, 34, 139], [127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121, 128, 104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9, 151, 108, 48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92, 186, 230, 229, 118, 202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56, 157, 173, 106, 204, 194, 135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4, 144, 24, 23, 77, 146, 91, 205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91, 181, 85, 84, 17, 206, 203, 36, 148, 171, 140, 92, 40, 39, 193, 189, 244, 159, 158, 28, 247, 246, 161, 236, 3, 196, 54, 68, 104, 193, 168, 8, 117, 228, 31, 189, 193, 55, 98, 97, 99, 126, 47, 100, 166, 79, 218, 155, 154, 26, 209, 49, 131, 135, 136, 150, 47, 126, 217, 223, 52, 53, 45, 51, 134, 211, 170, 140, 67, 69, 108, 43, 106, 91, 230, 119, 120, 226, 130, 247, 63, 53, 52, 238, 20, 242, 46, 70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227, 173, 155, 133, 123, 117, 111, 44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153, 22, 39, 37, 167, 200, 201, 208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28, 158, 157, 35, 226, 113, 160, 159, 27, 204, 202, 210, 113, 225, 46, 43, 202, 204, 62, 76, 77, 137, 123, 116, 41, 38, 72, 203, 129, 142, 64, 98, 240, 49, 102, 64, 41, 73, 74, 212, 216, 207, 42, 74, 184, 169, 170, 211, 170, 149, 176, 105, 66, 69, 122, 6, 168, 123, 147, 187, 96, 77, 90, 65, 55, 107, 89, 90, 180, 101, 100, 120, 63, 105, 104, 93, 137, 227, 15, 86, 85, 129, 102, 49, 14, 87, 86, 55, 8, 9, 100, 47, 121, 145, 23, 22, 88, 89, 179, 6, 122, 196, 88, 95, 96, 138, 172, 136, 215, 58, 172, 115, 48, 219, 42, 80, 81, 195, 3, 51, 43, 146, 61, 171, 175, 199, 81, 82, 38, 53, 46, 225, 144, 163, 110, 246, 33, 7, 52, 65, 66, 229, 228, 117, 34, 127, 234, 107, 108, 69, 109, 108, 151, 48, 64, 235, 62, 78, 191, 129, 209, 126, 111, 35, 143, 163, 161, 246, 117, 123, 50, 222, 65, 52, 19, 125, 141, 221, 55, 65, 3, 195, 197, 25, 7, 33, 220, 237, 44, 70, 71, 139, 122, 193, 245, 247, 130, 33, 71, 21, 162, 153, 158, 159, 170, 169, 150, 188, 174, 196, 216, 186, 92, 144, 160, 161, 2, 97, 167, 141, 125, 241, 164, 167, 37, 72, 38, 12, 145, 159, 160, 38, 82, 13, 63, 68, 71, 226, 35, 111, 158, 153, 154, 101, 50, 205, 206, 92, 165, 209, 198, 217, 165, 167, 97, 220, 115, 218, 133, 112, 243, 239, 238, 241, 214, 135, 169, 190, 173, 133, 171, 208, 32, 125, 44, 237, 86, 87, 178, 85, 86, 179, 84, 85, 180, 83, 84, 181, 201, 83, 182, 137, 93, 132, 76, 62, 183, 61, 76, 184, 57, 61, 185, 212, 57, 186, 214, 207, 187, 34, 143, 156, 79, 239, 237, 123, 137, 177, 44, 1, 4, 201, 194, 32, 64, 102, 129, 213, 215, 138, 59, 166, 219, 242, 99, 97, 2, 94, 141, 75, 59, 235, 24, 110, 228, 25, 130, 226, 23, 24, 229, 22, 23, 230, 26, 22, 231, 112, 26, 232, 189, 190, 243, 221, 56, 190, 28, 56, 221]]; // Triangle drawing method\n\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n\n  if (closePath) {\n    region.closePath();\n  }\n\n  ctx.strokeStyle = \"grey\";\n  ctx.stroke(region);\n}; // Drawing Mesh\n\n\nexport const drawMesh = (predictions, ctx, key) => {\n  if (predictions.length > 0) {\n    predictions.forEach(prediction => {\n      const keypoints = prediction.scaledMesh; //  Draw Triangles\n\n      for (let i = 0; i < TRIANGULATION[key].length / 3; i++) {\n        // Get sets of three keypoints for the triangle\n        const points = [TRIANGULATION[key][i * 3], TRIANGULATION[key][i * 3 + 1], TRIANGULATION[key][i * 3 + 2]].map(index => keypoints[index]); //  Draw triangle\n\n        drawPath(ctx, points, true);\n      } // Draw Dots\n\n\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n        ctx.beginPath();\n        ctx.arc(x, y, 1\n        /* radius */\n        , 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/zelinpu/Dev/FacialLandmarkDetection/src/utilities.js"],"names":["TRIANGULATION","drawPath","ctx","points","closePath","region","Path2D","moveTo","i","length","point","lineTo","strokeStyle","stroke","drawMesh","predictions","key","forEach","prediction","keypoints","scaledMesh","map","index","x","y","beginPath","arc","Math","PI","fillStyle","fill"],"mappings":"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","sourcesContent":["//  Triangulation sets of three\nexport const TRIANGULATION = [\n  [127, 34, 139],[127,\n    34,\n    139,\n    11,\n    0,\n    37,\n    232,\n    231,\n    120,\n    72,\n    37,\n    39,\n    128,\n    121,\n    47,\n    232,\n    121,\n    128,\n    104,\n    69,\n    67,\n    175,\n    171,\n    148,\n    157,\n    154,\n    155,\n    118,\n    50,\n    101,\n    73,\n    39,\n    40,\n    9,\n    151,\n    108,\n    48,\n    115,\n    131,\n    194,\n    204,\n    211,\n    74,\n    40,\n    185,\n    80,\n    42,\n    183,\n    40,\n    92,\n    186,\n    230,\n    229,\n    118,\n    202,\n    212,\n    214,\n    83,\n    18,\n    17,\n    76,\n    61,\n    146,\n    160,\n    29,\n    30,\n    56,\n    157,\n    173,\n    106,\n    204,\n    194,\n    135,\n    214,\n    192,\n    203,\n    165,\n    98,\n    21,\n    71,\n    68,\n    51,\n    45,\n    4,\n    144,\n    24,\n    23,\n    77,\n    146,\n    91,\n    205,\n    50,\n    187,\n    201,\n    200,\n    18,\n    91,\n    106,\n    182,\n    90,\n    91,\n    181,\n    85,\n    84,\n    17,\n    206,\n    203,\n    36,\n    148,\n    171,\n    140,\n    92,\n    40,\n    39,\n    193,\n    189,\n    244,\n    159,\n    158,\n    28,\n    247,\n    246,\n    161,\n    236,\n    3,\n    196,\n    54,\n    68,\n    104,\n    193,\n    168,\n    8,\n    117,\n    228,\n    31,\n    189,\n    193,\n    55,\n    98,\n    97,\n    99,\n    126,\n    47,\n    100,\n    166,\n    79,\n    218,\n    155,\n    154,\n    26,\n    209,\n    49,\n    131,\n    135,\n    136,\n    150,\n    47,\n    126,\n    217,\n    223,\n    52,\n    53,\n    45,\n    51,\n    134,\n    211,\n    170,\n    140,\n    67,\n    69,\n    108,\n    43,\n    106,\n    91,\n    230,\n    119,\n    120,\n    226,\n    130,\n    247,\n    63,\n    53,\n    52,\n    238,\n    20,\n    242,\n    46,\n    70,\n    156,\n    78,\n    62,\n    96,\n    46,\n    53,\n    63,\n    143,\n    34,\n    227,\n    173,\n    155,\n    133,\n    123,\n    117,\n    111,\n    44,\n    125,\n    19,\n    236,\n    134,\n    51,\n    216,\n    206,\n    205,\n    154,\n    153,\n    22,\n    39,\n    37,\n    167,\n    200,\n    201,\n    208,\n    36,\n    142,\n    100,\n    57,\n    212,\n    202,\n    20,\n    60,\n    99,\n    28,\n    158,\n    157,\n    35,\n    226,\n    113,\n    160,\n    159,\n    27,\n    204,\n    202,\n    210,\n    113,\n    225,\n    46,\n    43,\n    202,\n    204,\n    62,\n    76,\n    77,\n    137,\n    123,\n    116,\n    41,\n    38,\n    72,\n    203,\n    129,\n    142,\n    64,\n    98,\n    240,\n    49,\n    102,\n    64,\n    41,\n    73,\n    74,\n    212,\n    216,\n    207,\n    42,\n    74,\n    184,\n    169,\n    170,\n    211,\n    170,\n    149,\n    176,\n    105,\n    66,\n    69,\n    122,\n    6,\n    168,\n    123,\n    147,\n    187,\n    96,\n    77,\n    90,\n    65,\n    55,\n    107,\n    89,\n    90,\n    180,\n    101,\n    100,\n    120,\n    63,\n    105,\n    104,\n    93,\n    137,\n    227,\n    15,\n    86,\n    85,\n    129,\n    102,\n    49,\n    14,\n    87,\n    86,\n    55,\n    8,\n    9,\n    100,\n    47,\n    121,\n    145,\n    23,\n    22,\n    88,\n    89,\n    179,\n    6,\n    122,\n    196,\n    88,\n    95,\n    96,\n    138,\n    172,\n    136,\n    215,\n    58,\n    172,\n    115,\n    48,\n    219,\n    42,\n    80,\n    81,\n    195,\n    3,\n    51,\n    43,\n    146,\n    61,\n    171,\n    175,\n    199,\n    81,\n    82,\n    38,\n    53,\n    46,\n    225,\n    144,\n    163,\n    110,\n    246,\n    33,\n    7,\n    52,\n    65,\n    66,\n    229,\n    228,\n    117,\n    34,\n    127,\n    234,\n    107,\n    108,\n    69,\n    109,\n    108,\n    151,\n    48,\n    64,\n    235,\n    62,\n    78,\n    191,\n    129,\n    209,\n    126,\n    111,\n    35,\n    143,\n    163,\n    161,\n    246,\n    117,\n    123,\n    50,\n    222,\n    65,\n    52,\n    19,\n    125,\n    141,\n    221,\n    55,\n    65,\n    3,\n    195,\n    197,\n    25,\n    7,\n    33,\n    220,\n    237,\n    44,\n    70,\n    71,\n    139,\n    122,\n    193,\n    245,\n    247,\n    130,\n    33,\n    71,\n    21,\n    162,\n    153,\n    158,\n    159,\n    170,\n    169,\n    150,\n    188,\n    174,\n    196,\n    216,\n    186,\n    92,\n    144,\n    160,\n    161,\n    2,\n    97,\n    167,\n    141,\n    125,\n    241,\n    164,\n    167,\n    37,\n    72,\n    38,\n    12,\n    145,\n    159,\n    160,\n    38,\n    82,\n    13,\n    63,\n    68,\n    71,\n    226,\n    35,\n    111,\n    158,\n    153,\n    154,\n    101,\n    50,\n    205,\n    206,\n    92,\n    165,\n    209,\n    198,\n    217,\n    165,\n    167,\n    97,\n    220,\n    115,\n    218,\n    133,\n    112,\n    243,\n    239,\n    238,\n    241,\n    214,\n    135,\n    169,\n    190,\n    173,\n    133,\n    171,\n    208,\n    32,\n    125,\n    44,\n    237,\n    86,\n    87,\n    178,\n    85,\n    86,\n    179,\n    84,\n    85,\n    180,\n    83,\n    84,\n    181,\n    201,\n    83,\n    182,\n    137,\n    93,\n    132,\n    76,\n    62,\n    183,\n    61,\n    76,\n    184,\n    57,\n    61,\n    185,\n    212,\n    57,\n    186,\n    214,\n    207,\n    187,\n    34,\n    143,\n    156,\n    79,\n    239,\n    237,\n    123,\n    137,\n    177,\n    44,\n    1,\n    4,\n    201,\n    194,\n    32,\n    64,\n    102,\n    129,\n    213,\n    215,\n    138,\n    59,\n    166,\n    219,\n    242,\n    99,\n    97,\n    2,\n    94,\n    141,\n    75,\n    59,\n    235,\n    24,\n    110,\n    228,\n    25,\n    130,\n    226,\n    23,\n    24,\n    229,\n    22,\n    23,\n    230,\n    26,\n    22,\n    231,\n    112,\n    26,\n    232,\n    189,\n    190,\n    243,\n    221,\n    56,\n    190,\n    28,\n    56,\n    221,],\n];\n\n// Triangle drawing method\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n\n  if (closePath) {\n    region.closePath();\n  }\n  ctx.strokeStyle = \"grey\";\n  ctx.stroke(region);\n};\n\n// Drawing Mesh\nexport const drawMesh = (predictions, ctx, key) => {\n  if (predictions.length > 0) {\n    predictions.forEach((prediction) => {\n      const keypoints = prediction.scaledMesh;\n\n      //  Draw Triangles\n      for (let i = 0; i < TRIANGULATION[key].length / 3; i++) {\n        // Get sets of three keypoints for the triangle\n        const points = [\n          TRIANGULATION[key][i * 3],\n          TRIANGULATION[key][i * 3 + 1],\n          TRIANGULATION[key][i * 3 + 2],\n        ].map((index) => keypoints[index]);\n        //  Draw triangle\n        drawPath(ctx, points, true);\n      }\n\n      // Draw Dots\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n\n        ctx.beginPath();\n        ctx.arc(x, y, 1 /* radius */, 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
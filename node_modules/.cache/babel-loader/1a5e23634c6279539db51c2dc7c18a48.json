{"ast":null,"code":"//  Triangulation sets of three\nexport const TRIANGULATION = [[], [127, 34, 139, 11, 0, 37, 232, 231, 120, 72, 37, 39, 128, 121, 47, 232, 121, 128, 104, 69, 67, 175, 171, 148, 157, 154, 155, 118, 50, 101, 73, 39, 40, 9, 151, 108, 48, 115, 131, 194, 204, 211, 74, 40, 185, 80, 42, 183, 40, 92, 186, 230, 229, 118, 202, 212, 214, 83, 18, 17, 76, 61, 146, 160, 29, 30, 56, 157, 173, 106, 204, 194, 135, 214, 192, 203, 165, 98, 21, 71, 68, 51, 45, 4, 144, 24, 23, 77, 146, 91, 205, 50, 187, 201, 200, 18, 91, 106, 182, 90, 91, 181, 85, 84, 17, 206, 203, 36, 148, 171, 140, 92, 40, 39, 193, 189, 244, 159, 158, 28, 247, 246, 161, 236, 3, 196, 54, 68, 104, 193, 168, 8, 117, 228, 31, 189, 193, 55, 98, 97, 99, 126, 47, 100, 166, 79, 218, 155, 154, 26, 209, 49, 131, 135, 136, 150, 47, 126, 217, 223, 52, 53, 45, 51, 134, 211, 170, 140, 67, 69, 108, 43, 106, 91, 230, 119, 120, 226, 130, 247, 63, 53, 52, 238, 20, 242, 46, 70, 156, 78, 62, 96, 46, 53, 63, 143, 34, 227, 173, 155, 133, 123, 117, 111, 44, 125, 19, 236, 134, 51, 216, 206, 205, 154, 153, 22, 39, 37, 167, 200, 201, 208, 36, 142, 100, 57, 212, 202, 20, 60, 99, 28, 158, 157, 35, 226, 113, 160, 159, 27, 204, 202, 210, 113, 225, 46, 43, 202, 204, 62, 76, 77, 137, 123, 116, 41, 38, 72, 203, 129, 142, 64, 98, 240, 49, 102, 64, 41, 73, 74, 212, 216, 207, 42, 74, 184, 169, 170, 211, 170, 149, 176, 105, 66, 69, 122, 6, 168, 123, 147, 187, 96, 77, 90, 65, 55, 107, 89, 90, 180, 101, 100, 120, 63, 105, 104, 93, 137, 227, 15, 86, 85, 129, 102, 49, 14, 87, 86, 55, 8, 9, 100, 47, 121, 145, 23, 22, 88, 89, 179, 6, 122, 196, 88, 95, 96, 138, 172, 136, 215, 58, 172, 115, 48, 219, 42, 80, 81, 195, 3, 51, 43, 146, 61, 171, 175, 199, 81, 82, 38, 53, 46, 225, 144, 163, 110, 246, 33, 7, 52, 65, 66, 229, 228, 117, 34, 127, 234, 107, 108, 69, 109, 108, 151, 48, 64, 235, 62, 78, 191, 129, 209, 126, 111, 35, 143, 163, 161, 246, 117, 123, 50, 222, 65, 52, 19, 125, 141, 221, 55, 65, 3, 195, 197, 25, 7, 33, 220, 237, 44, 70, 71, 139, 122, 193, 245, 247, 130, 33, 71, 21, 162, 153, 158, 159, 170, 169, 150, 188, 174, 196, 216, 186, 92, 144, 160, 161, 2, 97, 167, 141, 125, 241, 164, 167, 37, 72, 38, 12, 145, 159, 160, 38, 82, 13, 63, 68, 71, 226, 35, 111, 158, 153, 154, 101, 50, 205, 206, 92, 165, 209, 198, 217, 165, 167, 97, 220, 115, 218, 133, 112, 243, 239, 238, 241, 214, 135, 169, 190, 173, 133, 171, 208, 32, 125, 44, 237, 86, 87, 178, 85, 86, 179, 84, 85, 180, 83, 84, 181, 201, 83, 182, 137, 93, 132, 76, 62, 183, 61, 76, 184, 57, 61, 185, 212, 57, 186, 214, 207, 187, 34, 143, 156, 79, 239, 237, 123, 137, 177, 44, 1, 4, 201, 194, 32, 64, 102, 129, 213, 215, 138, 59, 166, 219, 242, 99, 97, 2, 94, 141, 75, 59, 235, 24, 110, 228, 25, 130, 226, 23, 24, 229, 22, 23, 230, 26, 22, 231, 112, 26, 232, 189, 190, 243, 221, 56, 190, 28, 56, 221]]; // Triangle drawing method\n\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n\n  if (closePath) {\n    region.closePath();\n  }\n\n  ctx.strokeStyle = \"grey\";\n  ctx.stroke(region);\n}; // Drawing Mesh\n\n\nexport const drawMesh = (predictions, ctx, key) => {\n  if (predictions.length > 0) {\n    predictions.forEach(prediction => {\n      const keypoints = prediction.scaledMesh; //  Draw Triangles\n\n      for (let i = 0; i < TRIANGULATION[key].length / 3; i++) {\n        // Get sets of three keypoints for the triangle\n        const points = [TRIANGULATION[i * 3], TRIANGULATION[i * 3 + 1], TRIANGULATION[i * 3 + 2]].map(index => keypoints[index]); //  Draw triangle\n\n        drawPath(ctx, points, true);\n      } // Draw Dots\n\n\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n        ctx.beginPath();\n        ctx.arc(x, y, 1\n        /* radius */\n        , 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/zelinpu/Dev/FacialLandmarkDetection/src/utilities.js"],"names":["TRIANGULATION","drawPath","ctx","points","closePath","region","Path2D","moveTo","i","length","point","lineTo","strokeStyle","stroke","drawMesh","predictions","key","forEach","prediction","keypoints","scaledMesh","map","index","x","y","beginPath","arc","Math","PI","fillStyle","fill"],"mappings":"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","sourcesContent":["//  Triangulation sets of three\nexport const TRIANGULATION = [\n  [],[127,\n    34,\n    139,\n    11,\n    0,\n    37,\n    232,\n    231,\n    120,\n    72,\n    37,\n    39,\n    128,\n    121,\n    47,\n    232,\n    121,\n    128,\n    104,\n    69,\n    67,\n    175,\n    171,\n    148,\n    157,\n    154,\n    155,\n    118,\n    50,\n    101,\n    73,\n    39,\n    40,\n    9,\n    151,\n    108,\n    48,\n    115,\n    131,\n    194,\n    204,\n    211,\n    74,\n    40,\n    185,\n    80,\n    42,\n    183,\n    40,\n    92,\n    186,\n    230,\n    229,\n    118,\n    202,\n    212,\n    214,\n    83,\n    18,\n    17,\n    76,\n    61,\n    146,\n    160,\n    29,\n    30,\n    56,\n    157,\n    173,\n    106,\n    204,\n    194,\n    135,\n    214,\n    192,\n    203,\n    165,\n    98,\n    21,\n    71,\n    68,\n    51,\n    45,\n    4,\n    144,\n    24,\n    23,\n    77,\n    146,\n    91,\n    205,\n    50,\n    187,\n    201,\n    200,\n    18,\n    91,\n    106,\n    182,\n    90,\n    91,\n    181,\n    85,\n    84,\n    17,\n    206,\n    203,\n    36,\n    148,\n    171,\n    140,\n    92,\n    40,\n    39,\n    193,\n    189,\n    244,\n    159,\n    158,\n    28,\n    247,\n    246,\n    161,\n    236,\n    3,\n    196,\n    54,\n    68,\n    104,\n    193,\n    168,\n    8,\n    117,\n    228,\n    31,\n    189,\n    193,\n    55,\n    98,\n    97,\n    99,\n    126,\n    47,\n    100,\n    166,\n    79,\n    218,\n    155,\n    154,\n    26,\n    209,\n    49,\n    131,\n    135,\n    136,\n    150,\n    47,\n    126,\n    217,\n    223,\n    52,\n    53,\n    45,\n    51,\n    134,\n    211,\n    170,\n    140,\n    67,\n    69,\n    108,\n    43,\n    106,\n    91,\n    230,\n    119,\n    120,\n    226,\n    130,\n    247,\n    63,\n    53,\n    52,\n    238,\n    20,\n    242,\n    46,\n    70,\n    156,\n    78,\n    62,\n    96,\n    46,\n    53,\n    63,\n    143,\n    34,\n    227,\n    173,\n    155,\n    133,\n    123,\n    117,\n    111,\n    44,\n    125,\n    19,\n    236,\n    134,\n    51,\n    216,\n    206,\n    205,\n    154,\n    153,\n    22,\n    39,\n    37,\n    167,\n    200,\n    201,\n    208,\n    36,\n    142,\n    100,\n    57,\n    212,\n    202,\n    20,\n    60,\n    99,\n    28,\n    158,\n    157,\n    35,\n    226,\n    113,\n    160,\n    159,\n    27,\n    204,\n    202,\n    210,\n    113,\n    225,\n    46,\n    43,\n    202,\n    204,\n    62,\n    76,\n    77,\n    137,\n    123,\n    116,\n    41,\n    38,\n    72,\n    203,\n    129,\n    142,\n    64,\n    98,\n    240,\n    49,\n    102,\n    64,\n    41,\n    73,\n    74,\n    212,\n    216,\n    207,\n    42,\n    74,\n    184,\n    169,\n    170,\n    211,\n    170,\n    149,\n    176,\n    105,\n    66,\n    69,\n    122,\n    6,\n    168,\n    123,\n    147,\n    187,\n    96,\n    77,\n    90,\n    65,\n    55,\n    107,\n    89,\n    90,\n    180,\n    101,\n    100,\n    120,\n    63,\n    105,\n    104,\n    93,\n    137,\n    227,\n    15,\n    86,\n    85,\n    129,\n    102,\n    49,\n    14,\n    87,\n    86,\n    55,\n    8,\n    9,\n    100,\n    47,\n    121,\n    145,\n    23,\n    22,\n    88,\n    89,\n    179,\n    6,\n    122,\n    196,\n    88,\n    95,\n    96,\n    138,\n    172,\n    136,\n    215,\n    58,\n    172,\n    115,\n    48,\n    219,\n    42,\n    80,\n    81,\n    195,\n    3,\n    51,\n    43,\n    146,\n    61,\n    171,\n    175,\n    199,\n    81,\n    82,\n    38,\n    53,\n    46,\n    225,\n    144,\n    163,\n    110,\n    246,\n    33,\n    7,\n    52,\n    65,\n    66,\n    229,\n    228,\n    117,\n    34,\n    127,\n    234,\n    107,\n    108,\n    69,\n    109,\n    108,\n    151,\n    48,\n    64,\n    235,\n    62,\n    78,\n    191,\n    129,\n    209,\n    126,\n    111,\n    35,\n    143,\n    163,\n    161,\n    246,\n    117,\n    123,\n    50,\n    222,\n    65,\n    52,\n    19,\n    125,\n    141,\n    221,\n    55,\n    65,\n    3,\n    195,\n    197,\n    25,\n    7,\n    33,\n    220,\n    237,\n    44,\n    70,\n    71,\n    139,\n    122,\n    193,\n    245,\n    247,\n    130,\n    33,\n    71,\n    21,\n    162,\n    153,\n    158,\n    159,\n    170,\n    169,\n    150,\n    188,\n    174,\n    196,\n    216,\n    186,\n    92,\n    144,\n    160,\n    161,\n    2,\n    97,\n    167,\n    141,\n    125,\n    241,\n    164,\n    167,\n    37,\n    72,\n    38,\n    12,\n    145,\n    159,\n    160,\n    38,\n    82,\n    13,\n    63,\n    68,\n    71,\n    226,\n    35,\n    111,\n    158,\n    153,\n    154,\n    101,\n    50,\n    205,\n    206,\n    92,\n    165,\n    209,\n    198,\n    217,\n    165,\n    167,\n    97,\n    220,\n    115,\n    218,\n    133,\n    112,\n    243,\n    239,\n    238,\n    241,\n    214,\n    135,\n    169,\n    190,\n    173,\n    133,\n    171,\n    208,\n    32,\n    125,\n    44,\n    237,\n    86,\n    87,\n    178,\n    85,\n    86,\n    179,\n    84,\n    85,\n    180,\n    83,\n    84,\n    181,\n    201,\n    83,\n    182,\n    137,\n    93,\n    132,\n    76,\n    62,\n    183,\n    61,\n    76,\n    184,\n    57,\n    61,\n    185,\n    212,\n    57,\n    186,\n    214,\n    207,\n    187,\n    34,\n    143,\n    156,\n    79,\n    239,\n    237,\n    123,\n    137,\n    177,\n    44,\n    1,\n    4,\n    201,\n    194,\n    32,\n    64,\n    102,\n    129,\n    213,\n    215,\n    138,\n    59,\n    166,\n    219,\n    242,\n    99,\n    97,\n    2,\n    94,\n    141,\n    75,\n    59,\n    235,\n    24,\n    110,\n    228,\n    25,\n    130,\n    226,\n    23,\n    24,\n    229,\n    22,\n    23,\n    230,\n    26,\n    22,\n    231,\n    112,\n    26,\n    232,\n    189,\n    190,\n    243,\n    221,\n    56,\n    190,\n    28,\n    56,\n    221,],\n];\n\n// Triangle drawing method\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n\n  if (closePath) {\n    region.closePath();\n  }\n  ctx.strokeStyle = \"grey\";\n  ctx.stroke(region);\n};\n\n// Drawing Mesh\nexport const drawMesh = (predictions, ctx, key) => {\n  if (predictions.length > 0) {\n    predictions.forEach((prediction) => {\n      const keypoints = prediction.scaledMesh;\n\n      //  Draw Triangles\n      for (let i = 0; i < TRIANGULATION[key].length / 3; i++) {\n        // Get sets of three keypoints for the triangle\n        const points = [\n          TRIANGULATION[i * 3],\n          TRIANGULATION[i * 3 + 1],\n          TRIANGULATION[i * 3 + 2],\n        ].map((index) => keypoints[index]);\n        //  Draw triangle\n        drawPath(ctx, points, true);\n      }\n\n      // Draw Dots\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n\n        ctx.beginPath();\n        ctx.arc(x, y, 1 /* radius */, 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
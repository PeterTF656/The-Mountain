{"ast":null,"code":"var _jsxFileName = \"/Users/zelinpu/Desktop/the-mountain/src/Snip.js\";\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345\n  }\n});\nexport default function ImgCard(props) {\n  const classes = useStyles();\n  const [isSendingSkin, setIsSendingSkin] = useState(false);\n  const [isSendingOrgans, setIsSendingOrgans] = useState(false);\n  const isMounted = useRef(true); // set isMounted to false when we unmount the component\n\n  useEffect(() => {\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  const sendSkinRequest = useCallback(async () => {\n    function DataURIToBlob(dataURI) {\n      const splitDataURI = dataURI.split(',');\n      const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1]);\n      const mimeString = splitDataURI[0].split(':')[1].split(';')[0];\n      const ia = new Uint8Array(byteString.length);\n\n      for (let i = 0; i < byteString.length; i++) ia[i] = byteString.charCodeAt(i);\n\n      return new Blob([ia], {\n        type: mimeString\n      });\n    }\n\n    if (isSendingSkin) return; // update state\n\n    setIsSendingSkin(true);\n    const file = DataURIToBlob(props.img);\n    var data = new FormData();\n    data.append('file', file); //     for(var pair of data.entries()) {\n    //         console.log(pair[0]+ ', '+ pair[1]); \n    //    }\n\n    try {\n      const result = await fetch('https://aebbe9f73e8e.ngrok.io/predict', {\n        method: 'POST',\n        //headers: { \"Content-Type\": \"multipart/form-data\" },\n        body: data\n      });\n      const res = await result.json();\n      console.log(data);\n    } catch (e) {\n      return null;\n    }\n\n    if (isMounted.current) // only update if we are still mounted\n      setIsSendingSkin(false);\n  }, [isSendingSkin]); // update the callback if the state changes\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardActionArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardMedia, {\n    component: \"img\",\n    alt: \"Contemplative Reptile\",\n    height: \"140\",\n    image: props.img,\n    title: \"Contemplative Reptile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, \"\\u622A\\u56FE\\u7ED3\\u679C\\u533A\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, \"\\u53EF\\u4EE5\\u9009\\u62E9\\u5C06\\u622A\\u56FE\\u4E0A\\u4F20\\u81F3\\u542F\\u51CC\\u670D\\u52A1\\u5668\\uFF0C\\u67E5\\u770B\\u81EA\\u5DF1\\u8138\\u90E8\\u7684\\u76AE\\u80A4\\u60C5\\u51B5\\u548C\\u4E94\\u5B98\\u6BD4\\u4F8B\\u5206\\u6790\\uFF5E\"))), /*#__PURE__*/React.createElement(CardActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    color: \"primary\",\n    disabled: isSendingSkin,\n    onClick: sendSkinRequest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"\\u76AE\\u80A4\\u72B6\\u6001\"), /*#__PURE__*/React.createElement(Button, {\n    size: \"small\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, \"\\u4E94\\u5B98\\u5206\\u6790\")));\n}","map":{"version":3,"sources":["/Users/zelinpu/Desktop/the-mountain/src/Snip.js"],"names":["React","useState","useRef","useEffect","useCallback","makeStyles","Card","CardActionArea","CardActions","CardContent","CardMedia","Button","Typography","useStyles","root","maxWidth","ImgCard","props","classes","isSendingSkin","setIsSendingSkin","isSendingOrgans","setIsSendingOrgans","isMounted","current","sendSkinRequest","DataURIToBlob","dataURI","splitDataURI","split","byteString","indexOf","atob","decodeURI","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","type","file","img","data","FormData","append","result","fetch","method","body","res","json","console","log","e"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useCallback} from 'react';\nimport { makeStyles, } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n});\n\nexport default function ImgCard(props) {\n  const classes = useStyles();\n  const [isSendingSkin, setIsSendingSkin] = useState(false);\n  const [isSendingOrgans, setIsSendingOrgans] = useState(false);\n  const isMounted = useRef(true);\n\n  // set isMounted to false when we unmount the component\n  useEffect(() => {\n      return () => {\n        isMounted.current = false\n      }\n    }, [])\n\n  const sendSkinRequest = useCallback(async() => {\n\n    function DataURIToBlob(dataURI) {\n        const splitDataURI = dataURI.split(',')\n        const byteString = splitDataURI[0].indexOf('base64') >= 0 ? atob(splitDataURI[1]) : decodeURI(splitDataURI[1])\n        const mimeString = splitDataURI[0].split(':')[1].split(';')[0]\n\n        const ia = new Uint8Array(byteString.length)\n        for (let i = 0; i < byteString.length; i++)\n            ia[i] = byteString.charCodeAt(i)\n\n        return new Blob([ia], { type: mimeString })\n      }\n\n    if (isSendingSkin) return\n    // update state\n    setIsSendingSkin(true)\n    const file = DataURIToBlob(props.img)\n    var data = new FormData();\n    data.append('file', file)\n//     for(var pair of data.entries()) {\n//         console.log(pair[0]+ ', '+ pair[1]); \n//    }\n   try{    \n    const result = await fetch('https://aebbe9f73e8e.ngrok.io/predict', {\n      method: 'POST',\n      //headers: { \"Content-Type\": \"multipart/form-data\" },\n      body: data,\n  });\n    const res = await result.json(); \n    console.log(data)\n  }catch(e){\n  return null;\n}\nif (isMounted.current) // only update if we are still mounted\nsetIsSendingSkin(false)\n}, [isSendingSkin]) // update the callback if the state changes\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt=\"Contemplative Reptile\"\n          height=\"140\"\n          image={props.img}\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            截图结果区\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            可以选择将截图上传至启凌服务器，查看自己脸部的皮肤情况和五官比例分析～\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\" disabled={isSendingSkin} onClick={sendSkinRequest}>\n          皮肤状态\n        </Button>\n        <Button size=\"small\" color=\"primary\">\n          五官分析\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}"]},"metadata":{},"sourceType":"module"}
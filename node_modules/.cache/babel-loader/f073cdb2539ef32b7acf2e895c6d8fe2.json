{"ast":null,"code":"//  Triangulation sets of three\nexport const TRIANGULATION = [[0, 0, 0], [52, 65, 222, 52, 223, 222, 223, 222, 28, 222, 28, 56, 222, 221, 56, 222, 65, 55, 221, 55, 193, 221, 189, 193, 56, 189, 190, 190, 243, 244, 189, 244, 245], [124, 113, 130, 124, 46, 113, 113, 130, 247, 46, 225, 113, 225, 247, 30, 46, 225, 53, 53, 225, 224, 224, 29, 30, 53, 224, 223, 223, 29, 27, 223, 28, 27, 247, 246, 30, 246, 30, 161, 30, 161, 160, 29, 160, 159, 27, 159, 158]]; // Triangle drawing method\n\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n\n  if (closePath) {\n    region.closePath();\n  }\n\n  ctx.strokeStyle = \"grey\";\n  ctx.stroke(region);\n}; // Drawing Mesh\n\n\nexport const drawMesh = (predictions, ctx, key) => {\n  if (predictions.length > 0) {\n    predictions.forEach(prediction => {\n      const keypoints = prediction.scaledMesh; //  Draw Triangles\n\n      for (let i = 0; i < TRIANGULATION[key].length / 3; i++) {\n        // Get sets of three keypoints for the triangle\n        const points = [TRIANGULATION[key][i * 3], TRIANGULATION[key][i * 3 + 1], TRIANGULATION[key][i * 3 + 2]].map(index => keypoints[index]); //  Draw triangle\n\n        drawPath(ctx, points, true);\n      } // Draw Dots\n\n\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n        ctx.beginPath();\n        ctx.arc(x, y, 1\n        /* radius */\n        , 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/zelinpu/Dev/FacialLandmarkDetection/src/utilities.js"],"names":["TRIANGULATION","drawPath","ctx","points","closePath","region","Path2D","moveTo","i","length","point","lineTo","strokeStyle","stroke","drawMesh","predictions","key","forEach","prediction","keypoints","scaledMesh","map","index","x","y","beginPath","arc","Math","PI","fillStyle","fill"],"mappings":"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","sourcesContent":["//  Triangulation sets of three\nexport const TRIANGULATION = [\n  [0, 0, 0],[52,\n  65,\n222,\n52,\n223,\n222,\n223,\n222,\n28,\n222,\n28,\n56,\n222,\n221,\n56,\n222,\n65,\n55,\n221,\n55,\n193,\n221,\n189,\n193,\n56,\n189,\n190,\n190,\n243,\n244,\n189,\n244,\n245,\n],[\n124,\n113,\n130,\n124,\n46,\n113,\n113,\n130,\n247,\n46,\n225,\n113,\n225,\n247,\n30,\n46,\n225,\n53,\n53,\n225,\n224,\n224,\n29,\n30,\n53,\n224,\n223,\n223,\n29,\n27,\n223,\n28,\n27,\n247,\n246,\n30,\n246,\n30,\n161,\n30,\n161,\n160,\n29,\n160,\n159,\n27,\n159,\n158,\n],\n];\n\n// Triangle drawing method\nconst drawPath = (ctx, points, closePath) => {\n  const region = new Path2D();\n  region.moveTo(points[0][0], points[0][1]);\n  for (let i = 1; i < points.length; i++) {\n    const point = points[i];\n    region.lineTo(point[0], point[1]);\n  }\n\n  if (closePath) {\n    region.closePath();\n  }\n  ctx.strokeStyle = \"grey\";\n  ctx.stroke(region);\n};\n\n// Drawing Mesh\nexport const drawMesh = (predictions, ctx, key) => {\n  if (predictions.length > 0) {\n    predictions.forEach((prediction) => {\n      const keypoints = prediction.scaledMesh;\n\n      //  Draw Triangles\n      for (let i = 0; i < TRIANGULATION[key].length / 3; i++) {\n        // Get sets of three keypoints for the triangle\n        const points = [\n          TRIANGULATION[key][i * 3],\n          TRIANGULATION[key][i * 3 + 1],\n          TRIANGULATION[key][i * 3 + 2],\n        ].map((index) => keypoints[index]);\n        //  Draw triangle\n        drawPath(ctx, points, true);\n      }\n\n      // Draw Dots\n      for (let i = 0; i < keypoints.length; i++) {\n        const x = keypoints[i][0];\n        const y = keypoints[i][1];\n\n        ctx.beginPath();\n        ctx.arc(x, y, 1 /* radius */, 0, 3 * Math.PI);\n        ctx.fillStyle = \"aqua\";\n        ctx.fill();\n      }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}
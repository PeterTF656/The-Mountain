{"ast":null,"code":"var _jsxFileName = \"/Users/zelinpu/Dev/FacialLandmarkDetection/src/App.js\";\n// 1. Install dependencies DONE\n// 2. Import dependencies DONE\n// 3. Setup webcam and canvas DONE\n// 4. Define references to those DONE\n// 5. Load posenet DONE\n// 6. Detect function DONE\n// 7. Drawing utilities from tensorflow DONE\n// 8. Draw functions DONE\n// Face Mesh - https://github.com/tensorflow/tfjs-models/tree/master/facemesh\nimport React, { useRef, useLayoutEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as tf from \"@tensorflow/tfjs\"; // OLD MODEL\n//import * as facemesh from \"@tensorflow-models/facemesh\";\n// NEW MODEL\n\nimport * as facemesh from \"@tensorflow-models/face-landmarks-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawMesh } from \"./utilities\";\nimport { drawEyeMesh } from \"./eyeStepOne\";\nimport DasAlerts from \"./report\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [draw, setDraw] = useState(0);\n  const [visible, setAlertVisibility] = useState(false); //  Load posenet\n\n  const runFacemesh = async key => {\n    // OLD MODEL\n    // const net = await facemesh.load({\n    //   inputResolution: { width: 640, height: 480 },\n    //   scale: 0.8,\n    // });\n    // NEW MODEL\n    const net = await facemesh.load(facemesh.SupportedPackages.mediapipeFacemesh);\n    setInterval(() => {\n      detect(net, key);\n    }, 20);\n  };\n\n  const detect = async (net, key) => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight; // Set canvas width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make Detections\n      // OLD MODEL\n      //       const face = await net.estimateFaces(video);\n      // NEW MODEL\n\n      const face = await net.estimateFaces({\n        input: video\n      }); // console.log(face);\n      // Get canvas context\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      requestAnimationFrame(() => {\n        drawMesh(face, ctx, draw);\n      });\n    }\n  };\n\n  useLayoutEffect(() => {\n    runFacemesh();\n    return () => {};\n  }, [draw]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setDraw(draw + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"change mesh\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setDraw(draw - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"minus mesh\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"current draw is \", draw, \".\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setTimeout(() => {\n      setAlertVisibility(true);\n    }, 5000),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, \"refresh\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DasAlerts, {\n    visible: visible,\n    duration: 20000,\n    onDurationEnd: setAlertVisibility,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, \"Fix your face 1.\")), /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    ref: webcamRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zindex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zelinpu/Dev/FacialLandmarkDetection/src/App.js"],"names":["React","useRef","useLayoutEffect","useState","tf","facemesh","Webcam","drawMesh","drawEyeMesh","DasAlerts","App","webcamRef","canvasRef","draw","setDraw","visible","setAlertVisibility","runFacemesh","key","net","load","SupportedPackages","mediapipeFacemesh","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","face","estimateFaces","input","ctx","getContext","requestAnimationFrame","setTimeout","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["// 1. Install dependencies DONE\n// 2. Import dependencies DONE\n// 3. Setup webcam and canvas DONE\n// 4. Define references to those DONE\n// 5. Load posenet DONE\n// 6. Detect function DONE\n// 7. Drawing utilities from tensorflow DONE\n// 8. Draw functions DONE\n\n// Face Mesh - https://github.com/tensorflow/tfjs-models/tree/master/facemesh\n\nimport React, { useRef, useLayoutEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as tf from \"@tensorflow/tfjs\";\n// OLD MODEL\n//import * as facemesh from \"@tensorflow-models/facemesh\";\n\n// NEW MODEL\nimport * as facemesh from \"@tensorflow-models/face-landmarks-detection\";\nimport Webcam from \"react-webcam\";\nimport { drawMesh } from \"./utilities\";\nimport { drawEyeMesh } from \"./eyeStepOne\";\nimport DasAlerts from \"./report\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [draw, setDraw] = useState(0);\n  const [visible, setAlertVisibility] = useState(false);\n\n  //  Load posenet\n  const runFacemesh = async (key) => {\n    // OLD MODEL\n    // const net = await facemesh.load({\n    //   inputResolution: { width: 640, height: 480 },\n    //   scale: 0.8,\n    // });\n    // NEW MODEL\n    const net = await facemesh.load(facemesh.SupportedPackages.mediapipeFacemesh);\n    setInterval(() => {\n      detect(net, key);\n    }, 20);\n  };\n\n  const detect = async (net, key) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      // OLD MODEL\n      //       const face = await net.estimateFaces(video);\n      // NEW MODEL\n      const face = await net.estimateFaces({input:video});\n      // console.log(face);\n\n      // Get canvas context\n      const ctx = canvasRef.current.getContext(\"2d\");\n      requestAnimationFrame(()=>{drawMesh(face, ctx, draw)});\n    }\n  };\n\n  useLayoutEffect(()=>{runFacemesh(); return () => {}},[draw]);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button\n          onClick={() => setDraw(draw + 1)}\n        >\n          change mesh\n        </button>\n      </div>\n      <div>\n        <button\n          onClick={() => setDraw(draw - 1)}\n        >\n          minus mesh\n        </button>\n      </div>\n      <div>current draw is {draw}.</div>\n      <button \n        onClick={()=> setTimeout(() => {setAlertVisibility(true)},5000)}>refresh</button>\n      <div>\n      <DasAlerts\n      visible={visible}\n      duration={20000}\n      onDurationEnd={setAlertVisibility}\n      >Fix your face 1.</DasAlerts>\n      </div>\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}